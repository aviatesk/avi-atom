### Global ###
'*':

  'Global: Backslash \\':
    'prefix': 'bs'
    'body': '\\\\$1'
    'description': 'Inserts backslash \\'
  'Global: Single quotations \'\'':
    'prefix': 'sq'
    'body': "'$1'"
    'description': 'Inserts single quotations'
  'Global: Double quotations ""':
    'prefix': 'dq'
    'body': '"$1"'
    'description': 'Inserts double quotations'


### Julia ###
'.source.julia':

  ## General
  'Julia: Struct':
    'prefix': 'struct'
    'body':
      '''
      struct ${1:Structname}
          ${2:fields}
      end  # struct ${1:Structname}
      '''
    'description': 'Inserts struct (composite types) blocks'
  'Julia: Function':
    'prefix': 'function'
    'body':
      '''
      function ${1:funcname}(${2:args})
          ${3:body}
      end  # function ${1:funcname}
      '''
    'description': 'Inserts function block'
  'Julia: Documented function':
    'prefix': 'functiond'
    'body':
      '''
      """
          ${1:funcname}(${2:args})

      ${4:document}
      """
      function ${1:funcname}(${2:args})
          ${3:body}
      end  # function ${1:funcname}
      '''
    'description': 'Inserts function block'
  'Julia: Macro':
    'prefix': 'macro'
    'body':
      '''
      macro ${1:macroname}(${2:args})
          ${3:body}
      end  # macro ${1:macroname}
      '''
    'description': 'Inserts macro block'
  'Julia: Documented macro':
    'prefix': 'macrod'
    'body':
      '''
      """
          @${1:macroname}(${2:args})

      ${4:document}
      """
      macro ${1:macroname}(${2:args})
          ${3:body}
      end  # macro ${1:macroname}
      '''
    'description': 'Inserts macro block'
  'Julia: Module':
    'prefix': 'module'
    'body':
      '''
      module ${1:modulename}
          $2
      end  # module ${1:modulename}
      '''
    'description': 'Inserts module block'
  'Julia: Quote':
    'prefix': 'quote'
    'body':
      '''
      quote
          $1
      end
      '''
    'description': 'Inserts quote block'
  'Julia: Comment block':
    'prefix': 'cb'
    'body':
      '''
      #=
      $1
      =#
      '''
    'description': 'Inserts comment block'
  'Julia: Document':
    'prefix': 'doc'
    'body':
      '''
      """
          $1

      ${2:doc}
      """
      '''

  ## Base
  'Base: print':
    'prefix': 'p'
    'body': "print(${1:expr})"
    'description': 'Inserts print snippet'
  'Base: println':
    'prefix': 'pl'
    'body': "println(${1:expr})"
    'description': 'Inserts println snippet'
  'Base: |> (Pipe)':
    'prefix': 'pi'
    'body': '|> $1'
    'description': 'Inserts pipe snippet'
  'Base: => (Pair)':
    'prefix': 'pa'
    'body': '$1 => $2'
    'description': 'Inserts pair snippet'

  # DataFrames
  'DataFramesMeta: @linq':
    'prefix': 'li'
    'body':
      '''
      @linq ${1:df} |>
          $2
      '''
    'description': 'Inserts @linq pipe line block'

  ## Julia-Client
  'Julia-Client: Code cell':
    'prefix': 'cc'
    'body':
      '''
      # %%
      $1
      '''
    'description': 'Inserts Julia-Client code cell'
  'Julia-Client: Markdown cell':
    'prefix': 'mc'
    'body':
      '''
      # %% markdown
      $1
      '''
    'description': 'Inserts Julia-Client markdown cell'


### Python ###
'.source.python':

  ## Insertions
  'print':
    'prefix': 'pr'
    'body': "print(${1:expr})"
    'description': 'Inserts print snippet'

  ## Imports
  'Utility libraries':
    'prefix': 'utils'
    'body':
      '''
      import os
      import sys
      import numpy as np
      import pandas as pd
      import matplotlib.pyplot as plt$1
      '''
    'description': 'Imports utility libraries'
  'numpy':
    'prefix': 'np'
    'body':
      '''
      import numpy as np$1
      '''
    'description': 'Imports numpy as np'
  'matplotlib.pyplot':
    'prefix': 'plt'
    'body':
      '''
      import matplotlib.pyplot as plt$1
      '''
    'description': 'Imports matplotlib.pyplot as plt'
  'pandas':
    'prefix': 'pd'
    'body':
      '''
      import pandas as pd$1
      '''
    'description': 'Imports pandas as pd'

  ## matplotlib.pyplot
  # plt.plot
  'plt.plot: xlabel':
    'prefix': 'xl'
    'body': "plt.xlabel('$1')"
    'description': 'Sets xlabel to plt.plot object'
  'plt.plot: ylabel':
    'prefix': 'yl'
    'body': "plt.ylabel('$1')"
    'description': 'Sets ylabel to plt.plot object'
  'plt.plot: title':
    'prefix': 'ti'
    'body': "plt.title('$1')"
    'description': 'Sets title to plt.plot object'
  'plt.plot: tight_layout':
    'prefix': 'tl'
    'body': "plt.tight_layout()$1"
    'description': 'Sets tight_layout to plt.plot object'
  'plt.plot: grid':
    'prefix': 'gr'
    'body': "plt.grid(${1:True})"
    'description': 'Sets grid to plt.plot object'
  'plt.plot: show':
    'prefix': 'show'
    'body': "plt.show()$1"
    'description': 'Shows plt.plot'
  # plt.subplots
  'plt.subplots: plt.subplots':
    'prefix': 'subplots'
    'body': "fig, axes = plt.subplots(nrows=${1:1}, ncols=${2:1}, figsize=${3:None}, tight_layout=${4:False})"
    'description': 'Creates plt.subplots object'
  # plt.figure.add_subplot
  'plt.figure.add_subplot: title':
    'prefix': 'sti'
    'body': ".set_title('$1')"
    'description': 'Sets title to plt.figure.add_subplot object'

  ## Hydrogen
  'Hydrogen: Code cell':
    'prefix': 'cc'
    'body':
      '''
      # %%
      $1
      '''
    'description': 'Inserts Hydrogen code cell'
  'Hydrogen: Markdown cell':
    'prefix': 'mc'
    'body':
      '''
      # %% markdown
      $1
      '''
    'description': 'Inserts Hydrogen markdown cell'


### Javascript ###
'.source.js':
  'Comment block':
    'prefix': 'cb'
    'body':
      '''
      /**
       * ${1:Comment}
       */
      '''
    'description': 'Insert multi-line comment block'
  'Line comment':
    'prefix': 'ci'
    'body': '/* ${1:Comment} */'
    'description': 'Insert line comment block'


### CSS ###
'.source.css':
  'Comment block':
    'prefix': 'cb'
    'body':
      '''
      /**
       * ${1:Comment}
       */
      '''
    'description': 'Insert multi-line comment block'
  'Line comment':
    'prefix': 'ci'
    'body': '/* ${1:Comment} */'
    'description': 'Insert line comment block'


### R ###
'.source.r':

  ## Insertions
  'print':
    'prefix': 'pr'
    'body': "print(${1:expr})"
    'description': 'Inserts print snippet'
  'cat':
    'prefix': 'cat'
    'body': "cat(${1:expr})"
    'description': 'Inserts cat snippet'

  ## Hydrogen
  'Hydrogen: Code cell':
    'prefix': 'cc'
    'body':
      '''
      # %%
      $1
      '''
    'description': 'Inserts Hydrogen code cell'


### Markdown families: GFM, Markdown, Weave.jl, pweave, RMarkdown ###
'.source.gfm, .text.md, .source.weave.md, .source.pweave.md, .source.gfm.rmd':

  'Markdown: Header':
    'prefix': 'h'
    'body':
      '''
      ${1:#} ${2:HEADER}
      '''
    'description': 'Inserts general header'
  'Markdown: H1':
    'prefix': 'h1'
    'body':
      '''
      # ${1:H1}
      '''
    'description': 'Inserts H1 header'
  'Markdown: H2':
    'prefix': 'h2'
    'body':
      '''
      ## ${1:H2}
      '''
    'description': 'Inserts H2 header'
  'Markdown: H3':
    'prefix': 'h3'
    'body':
      '''
      ### ${1:H3}
      '''
    'description': 'Inserts H3 header'
  'Markdown: H4':
    'prefix': 'h4'
    'body':
      '''
      #### ${1:H4}
      '''
    'description': 'Inserts H4 header'
  'Markdown: H5':
    'prefix': 'h5'
    'body':
      '''
      ##### ${1:H5}
      '''
    'description': 'Inserts H5 header'
  'Markdown: H6':
    'prefix': 'h6'
    'body':
      '''
      ###### ${1:H6}
      '''
    'description': 'Inserts H6 header'
  'Markdown: Code block':
    'prefix': 'cb'
    'body':
      '''
      ```${1:SYNTAX}
      $2
      ```
      '''
    'description': 'Inserts general code block'
  'Markdown: Inline code block':
    'prefix': 'ci'
    'body': '`$1`'
    'description': 'Inserts general inline code block'
  'Markdown: Comment block':
    'prefix': 'cmb'
    'body':
      '''
      <!--
      $1
      -->
      '''
    'description': 'Inserts comment block'
  'Markdown: Image file':
    'prefix': 'img'
    'body':
      '''
      <img src=$1 ${2:width=$3px} ${4:height=$5px} ${6:title='$7'}>$8
      '''
    'description': 'Inserts link to an image file'
  'Markdown: Break line':
    'prefix': 'br'
    'body': "<br>$1"
    'description': 'Inserts break line'


### MPE: HTML rendering, Styling, Enhancements ###
'.text.md, .source.weave.md, .source.pweave.md':

  ## HTML rendering
  'MPE: Meta settings for HTML rendering':
    'prefix': 'meta-md2html'
    'body':
      '''
      ---
      html:
          embed_local_images: true
          ${1:# }toc: true
      ${2:toc:
          depth_from: ${3:1}
          depth_to: ${4:3}
          ordered: ${5:false}}
      export_on_save:
          ${6:# }html: true
      ---$7
      '''
    'description': 'Inserts YAML for rendering HTML from Markdown with MPE'

  ## Styling
  'MPE: Numbering sections from H1':
    'prefix': 'numbering-from-h1'
    'body':
      '''
      <!-- Importing styles for numbering sections from H1 -->
      <!-- @import "C:/Users/aviat/.atom/mpe-styles/numbering-from-h1.less" -->
      '''
    'description':
      '''
      Imports .less sheet for numbering sections in MPE-previewing.
      Numbering starts from # H1, which may not be used as title.
      E.g.) R-markdown, pweave document, or general markdown document to be rendered as html.
      '''
  'MPE: Numbering sections from H2':
    'prefix': 'numbering-from-h2'
    'body':
      '''
      <!-- Importing styles for numbering sections from H2 -->
      <!-- @import "C:/Users/aviat/.atom/mpe-styles/numbering-from-h2.less" -->
      '''
    'description':
      '''
      Imports .less sheet for numbering sections in MPE-previewing.
      # H1 gonna be ignored from numbering, assuming it is used as a title.
      E.g.) README.md
      '''
  'MPE: Fancy github-light Theme':
    'prefix': 'fancy-github-light'
    'body':
      '''
      <!-- Importing fancy github-light theme -->
      <!-- @import "C:/Users/aviat/.atom/mpe-styles/fancy-github-light.less" -->
      '''
    'description':
      '''
      Imports .less sheet of fancier github-light preview theme.
      Colors headers fancily according to github-light theme.
      '''
  'MPE: Fancy one-dark Theme':
    'prefix': 'fancy-one-dark'
    'body':
      '''
      <!-- Importing fancy one-dark theme -->
      <!-- @import "C:/Users/aviat/.atom/mpe-styles/fancy-one-dark.less" -->
      '''
    'description':
      '''
      Imports .less sheet of fancier one-dark preview theme.
      Colors headers fancily and modifies table coloring to match One-Dark theme.
      '''

  ## Enhancements
  'MPE: Table of Contents':
    'prefix': 'toc'
    'body':
      '''
      ## TOC {ignore=True .ignorenumbering}

      <!-- @import "[TOC]" {cmd="toc" depthFrom=${1:1} depthTo=${2:3} orderedList=${3:false}} -->
      '''
    'description':
      '''
      Creates code chunk for auto-generating TOC with MPE-previewing.
      '''
  'MPE: Header':
    'prefix': 'h'
    'body':
      '''
      ${1:#} ${2:HEADER}${3: {${4:ignore=True}${5: .ignorenumbering}\\}}$6
      '''
    'description': 'Inserts general header'
  'MPE: Ignore numberings':
    'prefix': 'ignores'
    'body':
      '''
      ${1:{${2:ignore=True}${3: .ignorenumbering}\\}}$4
      '''
    'description': 'Inserts snippet to ignore TOC and/or preview numberings'
  'MPE: Slide cell':
    'prefix': 'sc'
    'body':
      '''
      <!-- slide -->
      $1
      '''
    'description': 'Inserts slide cell with MPE-previewing'


### MathJax Support ###
'.text.md, .source.weave.md, .source.pweave.md, .source.gfm.rmd':

  'MathJax: Inline MathJax block':
    'prefix': 'mi'
    'body': "\$${1:expr}\$"
    'description': 'Inserts inline MathJax block'
  'MathJax: MathJax block':
    'prefix': 'mb'
    'body':
      '''
      \$\$
      \t${1:expr}
      \$\$
      '''
    'description': 'Inserts MathJax block'


### GFM ###
'.source.gfm':

  ## GFM
  'GFM: Table of Contents':
    'prefix': 'toc'
    'body':
      '''
      <h2> TOC </h2>

      <!-- @import "[TOC]" {cmd="toc" depthFrom=${1:2} depthTo=${2:3} orderedList=${3:false}} -->
      '''
    'description':
      '''
      Creates code chunk for auto-generating TOC via MPE-previewing (tuned for GFM rendering)
      '''

  ## README.md
  'README: Conclusion':
    'prefix': 'conclusion-README'
    'body':
      '''
      <!-- ## License -->


      <!-- ## Acknowledgements -->


      <!-- ## References -->


      ## Author

      - **KADOWAKI, Shuhei** - *Undergraduate@Kyoto Univ.* - [aviatesk]


      <!-- Links -->

      [aviatesk]: https://github.com/aviatesk
      '''
    'description': 'Inserts conclusion sections for README'


### Weave.jl ###
'.source.weave.md':

  ## Meta
  'Weave.jl: Meta settings for weave to markdown':
    'prefix': 'meta-jmd2md'
    'body':
      '''
      ---
      ### MPE
      html:
          embed_local_images: true
          toc: true
      toc:
          depth_from: 2
          depth_to: 4
          ordered: true
      export_on_save:
          # html: true

      ### Weave
      options:
          ## output settings
          doctype: github
          # out_path:
          fig_path: figs
          ## default code chunk options
          # echo: true
          # results: "markup"
          # display: false
          hold: true
          wrap: false
          # include: true
          fig_width: 8
          fig_height: 5
          fig_ext: ".svg"
      ---
      '''
    'description':
      '''
      Inserts Weave.jl meta settings for generating markdown document,
      which is supposed to be rendered as HTML with Markdown-Preview-Enhanced after weaving
      '''

  ## Code block
  'Weave.jl: Julia code block':
    'prefix': 'jb'
    'body':
      '''
      ```julia
      $1
      ```
      '''
    'description': 'Inserts Julia code block'
  'Wweave.jl: Julia inline code block':
    'prefix': 'ji'
    'body': '`j $1`'
    'description': 'Inserts Julia inline code block'
  'Weave.jl: Julia code block (hold)':
    'prefix': 'jbh'
    'body':
      '''
      ```julia hold = true
      $1
      ```
      '''
    'description': 'Inserts Julia code block holding generated results'


### pweave ###
'.source.pweave.md':

  # Meta
  'pweave: Meta settings for pweave (-f markdown)':
    'prefix': 'meta-pweave-markdown'
    'body':
      """
      ---
      # This front-matter would only be used in generated markdown document via Markdown-Preview-Enhanced package,
      # and thus no html file would be generated from this pweave document.
      # To render the final html file, first execute "Dqs Shell Commands: Pmd2md" and then
      # open a generated markdown file, do "Markdown Preview Enhanced: Toggle" and finally save it.
      # This process should render html file with all fancy rendering facilities available.
      ```python name='meta-setup', echo=False, results='asis'
      print('''
      html:
          embed_local_images: true
          toc: true
      export_on_save:
          html: true
      ''')
      ```
      ---
      """
    'description':
      '''
      Inserts pweave meta settings for generating markdown document,
      which is supposed to be rendered as HTML with Markdown-Preview-Enhanced after weaving
      '''
  'pweave: Meta settings for pweave (-f md2html)':
    'prefix': 'meta-pweave-md2html'
    'body':
      '''
      % ${1:Title}
      % ${2:KADOWAKI, Shuhei}
      % ${3:Date}
      $4
      '''
    'description': 'Inserts pweave meta settings for directly weaving pweave document as HTML file (deprecated)'

  ## General
  'pweave: Utilities set-up':
    'prefix': 'pweave-utils'
    'body':
      """
      ```python name='utilities-setup', echo=${1:False}
      import os
      import sys
      import numpy as np
      import pandas as pd
      import matplotlib.pyplot as plt
      %matplotlib inline

      def print_df(df, stralign='center', showindex=True):
          '''
          Renders pandas.DataFrame object in markdown files.
          (Supposed to be used in .pmd file with code chunk `results='asis'`)

          ## Args
          - df: pd.DataFrame object (Note: Use `df.head` for large data !)
          - stralign: {'center', 'right', ...}
          - showindex: {True, False, 'always', 'never', iterator}
          '''

          from tabulate import tabulate
          print(tabulate(df, df.columns, tablefmt='pipe', stralign=stralign, showindex=showindex))
      ```$2
      """
    'description':
      '''
      Inserts Python code block defining pweave utilities
      - imports utility libraries
      - sets matplotlib rendered inline
      - defines function to render pandas.DataFrame beautifully
      '''

  ## Code block
  'pweave: Python code block':
    'prefix': 'pb'
    'body':
      '''
      ```python
      $1
      ```
      '''
    'description': 'Inserts Python code block'
  'pweave: Python inline code block':
    'prefix': 'pi'
    'body': '<% $1 %>'
    'description': 'Inserts Python inline code block'
  'pweave: Python code block (asis)':
    'prefix': 'pba'
    'body':
      '''
      ```python results='asis'
      $1
      ```
      '''
    'description': 'Inserts Python code block for rendering results without reformatting'
  'pweave: Python code block (hidden)':
    'prefix': 'pbh'
    'body':
      '''
      ```python results='hidden'
      $1
      ```
      '''
    'description': 'Inserts Python code block with its results hidden in final document'
  'pweave: Python code block (wrapping)':
    'prefix': 'pbw'
    'body':
      '''
      ```python wrap=${1:False}
      $2
      '''
    'description': 'Inserts Python code block with results-wrapping option'
  'pweave: Python code block (full default options)':
    'prefix': 'pbfull'
    'body':
      '''
      ```python name=None, echo=True, evaluate=True, results='verbatim', term=False, include=True, caption='', complete=True, wrap=True
      $1
      ```
      '''
    'description': 'Inserts Python code block with full options set to default values'


### RMarkdown ###
'.source.gfm.rmd':

  ## Meta
  'R-markdown: Meta settings for R-markdown':
    'prefix': 'meta-R-markdown'
    'body':
      '''
      ---
      title: ${1:Title}
      subtitle: ${2:# Subtitle}
      author: ${3:KADOWAKI, Shuhei}
      date: ${4:Date}
      output:
        html_document:
          toc: true
          toc_float: true
          number_sections: true
          theme: cosmo
          code_folding: show
          df_print: paged
      ---
      ```{r echo=FALSE}
      ### Setting the global code chunk options ###
      # Args
      #   comment='': won't append any string to the start of each line of results
      #   fig.align='center': align figures to the center of document
      knitr::opts_chunk$set(comment="", fig.align="center")
      ```
      $5
      '''
    'description':
      '''
      Inserts meta settings for R-markdown rendering: YAML and knitr settings
      '''

  ## Code block
  'R-markdown: R code block':
    'prefix': 'rb'
    'body':
      '''
      ```{r}
      $1
      ```
      '''
    'description': 'Inserts R code block'
  'R-markdown: R inline code block':
    'prefix': 'ri'
    'body':
      '''
      `r $1`
      '''
    'description': 'Inserts R inline code block'
  'R-markdown: R code block (multiple plots)':
    'prefix': 'rbmp'
    'body':
      '''
      ```{r fig.show="hold", out.width="50%", out.height="100%", fig.align="default"}
      ${1:# This options puts 2 plots horizontally}
      ```
      '''
    'description': 'Inserts R code block for rendering multiple plots in one figure'
  'R-markdown: R code block (data.frame)':
    'prefix': 'rbd'
    'body':
      '''
      ```{r rows.print=5, max.print=25}
      ${1:# only the first 25 rows gonna be rendered (5 rows per page)}
      ${2:data.frame}
      ```
      '''
    'description': 'Inserts R code block for rendering data.frame object with df_print set'
  'R-markdown: R code block (full default options)':
    'prefix': 'rbfull'
    'body':
      '''
      ```{r echo=TRUE, eval=TRUE, results="markup", fig.show="asis", fig.cap=NULL, fig.align="default", out.width=NULL, out.height=NULL, include=TRUE, warning=FALSE, comment=""}
      $1
      ```
      '''
    'description': 'Inserts R code block with full options set to default values'


### Java ###
'.source.java':

  ## Templates
  'meta':
    'prefix': 'meta'
    'body':
      '''
      /**
       * Description for this class
       */
      public class ${1:NAME} ${2:extends ${3:PARENT}} ${4:implements ${5:INTERFACE}} {

          /** Class variables */
          // Define instance or static variables

          /** Constructors */
          // Type "c" for snippet to call template constructor

          /** Methods */
          // Type "m" for snippet to call template method

          /** Main Method */
          public static void main(String[] args) {
              // What to do in this class
          }

      }
      '''
    'description': "Creates a template for writing class with meta information"

  ## Insertions
  'constructor':
    'prefix': 'c'
    'body':
      '''
      /**
       * Description for this constructor
       * @param PARAM: Description for this argment
       */
      public ${1:CLASSNAME}($2) {
          ${3:// How to initialize an instance of this class}
      }
      '''
    'description': "Inserts a template for writing constructor"
  'method':
    'prefix': 'm'
    'body':
      '''
      /**
       * ${5:Description for this method}
       */
      ${1:void} ${2:METHOD}($3) {
          ${4:// What to do with this method}
      }
      '''
    'description': "Inserts a template for writing method"
  'method (main)':
    'prefix': 'main'
    'body':
      '''
      public static void main(String[] args) {
          ${1:// What to do in this class}
      }
      '''
    'description': "Inserts main method"
  'for loop':
    'prefix': 'f'
    'body':
      '''
      for (${1:INITIALIZATION}; ${2:TERMINATION}; ${3:INCREMENT}) {
          ${4:// STATEMENT}
      }
      '''
    'description': 'Inserts for loop snippet'
  'for loop (enhanced)':
    'prefix': 'fe'
    'body':
      '''
      for (${1:TYPE} ${2:ELEMENT} : ${3:ARRAY}) {
          ${4:// STATEMENT}
      }
      '''
    'description': 'Inserts enhanced for loop snippet'
  'System.out.print':
    'prefix': 'p'
    'body': 'System.out.print($1);'
    'description': 'Inserts print snippet'
  'System.out.println':
    'prefix': 'pl'
    'body': 'System.out.println($1);'
    'description': 'Inserts println snippet'
  'Comment block':
    'prefix': 'cb'
    'body':
      '''
      /**
       * ${1:Comment}
       */
      '''
  'Line comment':
    'prefix': 'ci'
    'body': '/** ${1:Comment} */'
    'description': 'Insert line comment block'
