### global ###
'*':
  '\\':
    'prefix': 'bs'
    'body': '\\\\$1'
    'rightLabelHTML': '<span>\\</span>'
    'description': 'Inserts backslash \\'
  "''":
    'prefix': 'sq'
    'body': "'$1'"
    'rightLabelHTML': "<span>''</span>"
    'description': 'Inserts single quotations'
  "''''''":
    'prefix': 'tsq'
    'body': "'''$1'''"
    'rightLabelHTML': "<span>''''''</span>"
    'description': 'Inserts triple single quotations'
  '""':
    'prefix': 'dq'
    'body': '"$1"'
    'rightLabelHTML': '<span>""</span>'
    'description': 'Inserts double quotations'
  '""""""':
    'prefix': 'tdq'
    'body': '"""$1"""'
    'rightLabelHTML': '<span>""""""</span>'
    'description': 'Inserts triple double quotations'
'* .comment':
  'TODO':
    'prefix': 'todo'
    'body': 'TODO: $1'
    'rightLabelHTML': '<span>TODO</span>'
    'description': 'Inserts TODO annotation'
  'NOTE':
    'prefix': 'note'
    'body': 'NOTE: $1'
    'rightLabelHTML': '<span>NOTE</span>'
    'description': 'Inserts NOTE annotation'
  'XXX':
    'prefix': 'xxx'
    'body': 'XXX: $1'
    'rightLabelHTML': '<span>XXX</span>'
    'description': 'Inserts XXX annotation'
  'REVIEW':
    'prefix': 'review'
    'body': 'REVIEW: $1'
    'rightLabelHTML': '<span>REVIEW</span>'
    'description': 'Inserts REVIEW annotation'



### code cells ###
'.source.julia, .source.python, .source.ruby':
  'code cell':
    'prefix': 'cc'
    'body': '# %%$1'
    'description': 'Inserts code cell comment'
  'markdown cell':
    'prefix': 'mc'
    'body': '# %% markdown$1'
    'description': 'Inserts markdown cell comment'
'.source.js, .source.java':
  'code cell':
    'prefix': 'cc'
    'body': '// %%$1'
    'description': 'Inserts code cell comment'
  'markdown cell':
    'prefix': 'mc'
    'body': '// %% markdown$1'
    'description': 'Inserts markdown cell comment'



### Markdown ###

## general
'.source.gfm, .text.md, .source.weave.md, .source.pweave.md':

  'header':
    'prefix': 'h'
    'body': '${1:#} ${2:header}\n$2'
    'leftLabelHTML': '<span class="icon icon-markdown" style="color: #6a9fb5"></span>'
    'description': 'Inserts general header'
  'header 1':
    'prefix': 'h1'
    'body': '# ${1:header}\n$2'
    'leftLabelHTML': '<span class="icon icon-markdown" style="color: #6a9fb5"></span>'
    'description': 'Inserts H1 header'
  'header 2':
    'prefix': 'h2'
    'body': '## ${1:header}\n$2'
    'leftLabelHTML': '<span class="icon icon-markdown" style="color: #6a9fb5"></span>'
    'description': 'Inserts H2 header'
  'header 3':
    'prefix': 'h3'
    'body': '### ${1:header}\n$2'
    'leftLabelHTML': '<span class="icon icon-markdown" style="color: #6a9fb5"></span>'
    'description': 'Inserts H3 header'
  'header 4':
    'prefix': 'h4'
    'body': '#### ${1:header}\n$2'
    'leftLabelHTML': '<span class="icon icon-markdown" style="color: #6a9fb5"></span>'
    'description': 'Inserts H4 header'
  'header 5':
    'prefix': 'h5'
    'body': '##### ${1:header}\n$2'
    'leftLabelHTML': '<span class="icon icon-markdown" style="color: #6a9fb5"></span>'
    'description': 'Inserts H5 header'
  'hearder 6':
    'prefix': 'h6'
    'body': '###### ${1:header}\n$2'
    'leftLabelHTML': '<span class="icon icon-markdown" style="color: #6a9fb5"></span>'
    'description': 'Inserts H6 header'
  'code block':
    'prefix': 'cc'
    'body': '```${1:syntax}\n${2:code}\n```'
    'leftLabelHTML': '<span class="icon icon-markdown" style="color: #6a9fb5"></span>'
    'description': 'Inserts code block'
  'inline code block':
    'prefix': 'ci'
    'body': '`${1:code}`'
    'leftLabelHTML': '<span class="icon icon-markdown" style="color: #6a9fb5"></span>'
    'description': 'Inserts inline code block'
  'comment block':
    'prefix': 'cmb'
    'body': '<!--\n${1:comment}\n-->'
    'leftLabelHTML': '<span class="icon icon-markdown" style="color: #6a9fb5"></span>'
    'description': 'Inserts comment block'
  'inline comment block':
    'prefix': 'cmi'
    'body': '<!-- ${1:comment} -->'
    'leftLabelHTML': '<span class="icon icon-markdown" style="color: #6a9fb5"></span>'
    'description': 'Inserts inline comment block'
  'image':
    'prefix': 'img'
    'body': "<img src=$1 ${2:width=$3px} ${4:height=$5px} ${6:title='$7'}>$8"
    'leftLabelHTML': '<span class="icon icon-markdown" style="color: #6a9fb5"></span>'
    'description': 'Inserts link to an image file'
  'break line':
    'prefix': 'br'
    'body': '<br>\n$1'
    'leftLabelHTML': '<span class="icon icon-markdown" style="color: #6a9fb5"></span>'
    'description': 'Inserts break line'
  '@TODO list':
    'prefix': 'todo-list'
    'body': '[ ] @TODO $1'
    'leftLabelHTML': '<span class="icon icon-markdown" style="color: #6a9fb5"></span>'
    'description': 'Inserts @TODO list'

## MPE
'.text.md, .source.weave.md, .source.pweave.md':

  # enhancements
  'toc':
    'prefix': 'toc'
    'body':
      '''
      ## TOC {ignore=True .ignorenumbering}\n
      <!-- @import "[TOC]" {cmd="toc" depthFrom=${1:1} depthTo=${2:3} orderedList=${3:false}} -->
      $4
      '''
    'leftLabel': 'MPE'
    'description': 'Inserts MPE code chunk for auto-generating TOC'
    'descriptionMoreURL': 'https://shd101wyy.github.io/markdown-preview-enhanced/#/toc'
  'header':
    'prefix': 'h'
    'body': '${1:#} ${2:header}${3: {${4:ignore=True}${5: .ignorenumbering}\\}}$6'
    'leftLabel': 'MPE'
    'description': 'Inserts MPE custom header'
  'ignore numberings':
    'prefix': 'ignores'
    'body': '${1:{${2:ignore=True}${3: .ignorenumbering}\\}}$4'
    'leftLabel': 'MPE'
    'description': 'Inserts header setting to ignore MPE TOC and header numberings'
  'slide cell':
    'prefix': 'sc'
    'body': '<!-- slide -->\n$1'
    'leftLabel': 'MPE'
    'description': 'Inserts MPE slide cell'
    'descriptionMoreURL': 'https://shd101wyy.github.io/markdown-preview-enhanced/#/presentation'

  # html generating
  'header settings for HTML generating':
    'prefix': 'mpe-md2html'
    'body':
      '''
      ---
      html:
      \tembed_local_images: true
      \t${1:# }toc: true
      ${2:toc:
      \tdepth_from: ${3:1}
      \tdepth_to: ${4:3}
      \tordered: ${5:false}}
      export_on_save:
      \t${6:# }html: true
      ---$7
      '''
    'leftLabel': 'MPE'
    'description': 'Inserts header settings for generating HTML from Markdown with MPE'
    'descriptionMoreURL': 'https://shd101wyy.github.io/markdown-preview-enhanced/#/html'

  # styling
  'numbering sections from h1':
    'prefix': 'mpe-numbering-from-h1'
    'body':
      '''
      <!-- importing styles for numbering sections from h1 -->
      <!-- @import "C:/Users/aviat/.atom/mpe-styles/numbering-from-h1.less" -->
      $1
      '''
    'leftLabel': 'MPE'
    'description':
      '''
      Imports stylesheet for numbering sections in MPE.
      Numbering starts from H1, which may not be used as title.
      e.g.) Weave.jl, pweave, R-markdown
      '''
  'numbering sections from h2':
    'prefix': 'mpe-numbering-from-h2'
    'body':
      '''
      <!-- importing styles for numbering sections from h2 -->
      <!-- @import "C:/Users/aviat/.atom/mpe-styles/numbering-from-h2.less" -->
      $1
      '''
    'leftLabel': 'MPE'
    'description':
      '''
      Imports style sheet for numbering sections in MPE.
      Numbering starts from H2 and H1 gonna be ignored from numbering, assuming it is used as a title.
      e.g.) README.md
      '''
  'fancy github-light theme':
    'prefix': 'mpe-fancy-github-light'
    'body':
      '''
      <!-- importing fancy github-light theme -->
      <!-- @import "C:/Users/aviat/.atom/mpe-styles/fancy-github-light.less" -->
      $1
      '''
    'leftLabel': 'MPE'
    'description': 'Imports style sheet of fancy github-light preview theme: colors headers fancily according to github-light theme'
  'fancy one-dark theme':
    'prefix': 'mpe-fancy-one-dark'
    'body':
      '''
      <!-- importing fancy one-dark theme -->
      <!-- @import "C:/Users/aviat/.atom/mpe-styles/fancy-one-dark.less" -->
      $1
      '''
    'leftLabel': 'MPE'
    'description':
      '''
      Imports style sheet of fancier one-dark preview theme:
      - colors headers fancily
      - modifies table coloring to match Atom's one-dark theme
      '''

  ## MathJax
  'inline MathJax block':
    'prefix': 'mi'
    'body': "\$${1:expr}\$"
    'leftLabelHTML': '<span class="icon icon-markdown" style="color: #6a9fb5"></span>'
    'description': 'Inserts inline MathJax block'
  'MathJax block':
    'prefix': 'mb'
    'body': '\$\$\n\t${1:expr}\n\$\$'
    'leftLabelHTML': '<span class="icon icon-markdown" style="color: #6a9fb5"></span>'
    'description': 'Inserts MathJax block'

### GFM ###
'.source.gfm':

  ## GFM
  'toc':
    'prefix': 'toc'
    'body':
      '''
      <h2> TOC </h2>\n
      <!-- @import "[TOC]" {cmd="toc" depthFrom=${1:2} depthTo=${2:3} orderedList=${3:false}} -->
      '''
    'leftLabel': 'GFM'
    'description': 'Inserts MPE code chunk for auto-generating TOC: tuned for GFM rendering'
    'descriptionMoreURL': 'https://shd101wyy.github.io/markdown-preview-enhanced/#/toc'

  ## README.md
  'conclusion':
    'prefix': 'conclusion-README'
    'body':
      '''
      <!-- ## License -->\n\n
      <!-- ## Acknowledgements -->\n\n
      <!-- ## References -->\n\n
      ## Author\n
      - **KADOWAKI, Shuhei** - *Undergraduate@Kyoto Univ.* - [aviatesk]\n\n
      <!-- Links -->\n
      [aviatesk]: https://github.com/aviatesk
      '''
    'leftLabel': 'README'
    'description': 'Inserts conclusion sections for README.md'



### julia ###
'.source.julia':

  ## julia itself
  'function':
    'prefix': 'function'
    'body': 'function ${1:name}(${2:args})\n\t${3:body}\nend'
    'rightLabelHTML': '<span>Julia</span>'
    'description': 'Inserts function block'
  'function assignment':
    'prefix': 'func'
    'body': '${1:name}(${2:args}) = ${3:begin\n\t${4:body}\nend}'
    'rightLabelHTML': '<span>Julia</span>'
    'description': 'Inserts function block in the assignment form'
    'descriptionMoreURL': 'https://docs.julialang.org/en/v1/manual/functions/#man-functions-1'
  'macro':
    'prefix': 'macro'
    'body': 'macro ${1:name}(${2:args})\n\t${3:body}\nend'
    'rightLabelHTML': '<span>Julia</span>'
    'description': 'Inserts macro block'
    'descriptionMoreURL': 'https://docs.julialang.org/en/v1/manual/metaprogramming/index.html#man-macros-1'
  'struct':
    'prefix': 'struct'
    'body': 'struct ${1:name}\n\t${3:field}\nend'
    'rightLabelHTML': '<span>Julia</span>'
    'description': 'Inserts struct block'
  'mutable struct':
    'prefix': 'mutable struct'
    'body': 'mutable struct ${1:name}\n\t${3:field}\nend'
    'rightLabelHTML': '<span>Julia</span>'
    'description': 'Inserts mutable struct block'
  'begin':
    'prefix': 'begin'
    'body': 'begin\n\t$1\nend'
    'rightLabelHTML': '<span>Julia</span>'
    'description': 'Inserts begin block'
  'let':
    'prefix': 'let'
    'body': 'let $1\n\t$2\nend'
    'rightLabelHTML': '<span>Julia</span>'
    'description': 'Inserts let block'
  'do':
    'prefix': 'do'
    'body': 'do ${1:args}\n\t$2\nend'
    'rightLabelHTML': '<span>Julia</span>'
    'description': 'Inserts do block'
  'quote':
    'prefix': 'quote'
    'body': 'quote\n\t$1\nend'
    'rightLabelHTML': '<span>Julia</span>'
    'description': 'Inserts quote block'
  'if':
    'prefix': 'if'
    'body': 'if ${1:cond}\n\t$2\nend'
    'rightLabelHTML': '<span>Julia</span>'
    'description': 'Inserts if block'
  'else':
    'prefix': 'else'
    'body': 'else\n\t${1:body}'
    'rightLabelHTML': '<span>Julia</span>'
    'description': 'Inserts else block'
  'elseif':
    'prefix': 'elseif'
    'body': 'elseif ${1:cond}\n\t${2:body}'
    'rightLabelHTML': '<span>Julia</span>'
    'description': 'Inserts elseif block'
  'try catch':
    'prefix': 'try'
    'body': 'try\n\t${1:body}\ncatch err\n\t@error err\nend$2'
    'rightLabelHTML': '<span>Julia</span>'
    'description': 'Inserts try/catch block'
  'for':
    'prefix': 'for'
    'body': 'for ${1:val} ${2:in} ${3:itr}\n\t${4:body}\nend'
    'rightLabelHTML': '<span>Julia</span>'
    'description': 'Inserts for loop block'
  'comment block':
    'prefix': 'cb'
    'body': '#=\n$1\n=#'
    'rightLabelHTML': '<span>Julia</span>'
    'description': 'Inserts comment block'

  ## Base
  'function chaining':
    'prefix': 'pi'
    'body': '|>$1'
    'rightLabelHTML': '<span>Base</span>'
    'description': 'Inserts |> operator'
  'document':
    'prefix': 'doc'
    'body': '"""\n    ${1:something}\n\n${2:docstrings}\n"""'
    'rightLabelHTML': '<span>Base</span>'
    'description': 'Inserts documentation string block'

  ## DataFrames
  '@linq chaining':
    'prefix': 'linq'
    'body': '@linq ${1:df} |>\n\t$2'
    'rightLabelHTML': '<span>DataFramesMeta</span>'
    'description': 'Inserts @linq pipe line block'
    'descriptionMoreURL': 'https://github.com/JuliaData/DataFramesMeta.jl#linq-macro'

## docstring
'.source.julia .string.docstring.julia':
  'inline mathblock':
    'prefix': 'mi'
    'body': '``$1``'
    'rightLabelHTML': '<span>Docs</span>'
    'descrition': 'Inserts inline math block inside a docstring'
    'descriptionMoreURL': 'https://docs.julialang.org/en/v1/manual/documentation/index.html'
  'mathblock':
    'prefix': 'mb'
    'body': '\\\\$$1\\\\$'
    'rightLabelHTML': '<span>Docs</span>'
    'descrition': 'Inserts math block inside a docstring'
    'descriptionMoreURL': 'https://docs.julialang.org/en/v1/manual/documentation/index.html'

## scope specific
'.source.julia .meta.bracket.julia':
  'for':
    'prefix': 'for'
    'body': '${1:body} for ${2:val} ${3:in} ${4:itr}'
    'rightLabelHTML': '<span>Julia</span>'
    'description': 'Inserts for loop comprehension'
    'descriptionMoreURL': 'https://docs.julialang.org/en/v1/manual/arrays/#Comprehensions-1'

## Weave
'.source.weave.md':

  # general
  'header settings for weaving to markdown':
    'prefix': 'weave-jmd2md'
    'body':
      '''
      ---
      ### MPE
      html:
      \tembed_local_images: true
      \ttoc: true
      toc:
      \tdepth_from: 2
      \tdepth_to: 4
      \tordered: true
      export_on_save:
      \t# html: true
      ### Weave
      options:
      \t## output settings
      \tdoctype: github
      \t# out_path:
      \tfig_path: figs
      \t## default code chunk options
      \techo: true
      \teval: true
      \tresults: "markup"
      \tterm: false
      \thold: false
      \twrap: false
      \tfig_width: 8
      \tfig_height: 5
      \tfig_ext: ".svg"
      ---
      '''
    'rightLabelHTML': '<span>Weave</span>'
    'description':
      '''
      Inserts Weave.jl header settings for weaving to Markdown,
      which is supposed to be rendered as HTML with Markdown-Preview-Enhanced after weaving
      '''
    'descriptionMoreURL': 'http://weavejl.mpastell.com/stable/usage/#Setting-document-options-in-header-1'
  'header settings for weaving to html':
    'prefix': 'weave-jmd2html'
    'body':
      '''
      ---
      ### Weave
      title: ${1:Title}
      author: KADOWAKI, Shuhei
      date: 2019/${2:MM}/${3:DD}
      options:
      \t## output settings
      \t# out_path:
      \tfig_path: figs
      \t## default code chunk options
      \techo: true
      \teval: true
      \tresults: "markup"
      \tterm: false
      \thold: false
      \twrap: false
      \tfig_width: 8
      \tfig_height: 5
      \tfig_ext: ".svg"
      ---
      '''
    'rightLabelHTML': '<span>Weave</span>'
    'description': 'Inserts Weave.jl header settings for weaving to HTML document'
    'descriptionMoreURL': 'http://weavejl.mpastell.com/stable/usage/#Setting-document-options-in-header-1'

  # code chunks
  'code chunk':
    'prefix': 'jcc'
    'body': '```julia\n${1:code}\n```'
    'rightLabelHTML': '<span>Weave</span>'
    'description': 'Inserts Weave code chunk'
    'descriptionMoreURL': 'http://weavejl.mpastell.com/stable/chunk_options/'
  'code chunk (hold)':
    'prefix': 'jcch'
    'body': '```julia hold = true\n${1:code}\n```'
    'rightLabelHTML': '<span>Weave</span>'
    'description': 'Inserts Weave code chunk whose outputs are holded until the end of the chunk'
    'descriptionMoreURL': 'http://weavejl.mpastell.com/stable/chunk_options/'
  'code chunk (term)':
    'prefix': 'jcct'
    'body': '```julia term = true\n${1:code}\n```'
    'rightLabelHTML': '<span>Weave</span>'
    'description': 'Inserts Weave code chunk whose outputs emulate a REPL session'
    'descriptionMoreURL': 'http://weavejl.mpastell.com/stable/chunk_options/'
  'inline chunk block':
    'prefix': 'jci'
    'body': '`j ${1:code}`'
    'rightLabelHTML': '<span>Weave</span>'
    'description': 'Inserts Weave inline code block'
    'descriptionMoreURL': 'http://weavejl.mpastell.com/stable/chunk_options/'



### latex ###
'.text.tex.latex':
  'verbatim text':
    'prefix': 'v'
    'body': 'verb|${1:code}|'
  'minted inline code':
    'prefix': 'ci'
    'body': 'mintinline\{${1:lang}\}\{${2:code}\}'
  'minted inline julia code':
    'prefix': 'jl'
    'body': 'jlinline\{${1:code}\}'
  'inline math enviroment':
    'prefix': 'mi'
    'body': "(${1:expr}\\\\)$2"
  'MathJax block':
    'prefix': 'mb'
    'body': '[\n\t${1:expr}\n\\\\]$2'


### Python ###
'.source.python':

  ## general
  'basic utilities':
    'prefix': 'utils'
    'body':
      '''
      import os
      import sys
      import numpy as np
      import pandas as pd
      import matplotlib.pyplot as plt$1
      '''
    'description': 'Imports basic utility libraries'
  'numpy':
    'prefix': 'np'
    'body':
      '''
      import numpy as np$1
      '''
    'description': 'Imports numpy as np'
  'matplotlib.pyplot':
    'prefix': 'plt'
    'body':
      '''
      import matplotlib.pyplot as plt$1
      '''
    'description': 'Imports matplotlib.pyplot as plt'
  'pandas':
    'prefix': 'pd'
    'body':
      '''
      import pandas as pd$1
      '''
    'description': 'Imports pandas as pd'

  ## matplotlib.pyplot
  # plt.plot
  'plt.plot: xlabel':
    'prefix': 'xl'
    'body': "plt.xlabel('$1')"
    'description': 'Sets xlabel to plt.plot object'
  'plt.plot: ylabel':
    'prefix': 'yl'
    'body': "plt.ylabel('$1')"
    'description': 'Sets ylabel to plt.plot object'
  'plt.plot: title':
    'prefix': 'ti'
    'body': "plt.title('$1')"
    'description': 'Sets title to plt.plot object'
  'plt.plot: tight_layout':
    'prefix': 'tl'
    'body': "plt.tight_layout()$1"
    'description': 'Sets tight_layout to plt.plot object'
  'plt.plot: grid':
    'prefix': 'gr'
    'body': "plt.grid(${1:True})"
    'description': 'Sets grid to plt.plot object'
  'plt.plot: show':
    'prefix': 'show'
    'body': "plt.show()$1"
    'description': 'Shows plt.plot'
  # plt.subplots
  'plt.subplots: plt.subplots':
    'prefix': 'subplots'
    'body': "fig, axes = plt.subplots(nrows=${1:1}, ncols=${2:1}, figsize=${3:None}, tight_layout=${4:False})"
    'description': 'Creates plt.subplots object'
  # plt.figure.add_subplot
  'plt.figure.add_subplot: title':
    'prefix': 'sti'
    'body': ".set_title('$1')"
    'description': 'Sets title to plt.figure.add_subplot object'

## pweave
'.source.pweave.md':

  ## general
  'header settings for weaving to markdown':
    'prefix': 'pweave-pmd2md'
    'body':
      """
      ---
      # This front-matter would only be used in generated markdown document via Markdown-Preview-Enhanced package,
      # and thus no html file would be generated from this pweave document.
      # To render the final html file, first execute "Dqs Shell Commands: Pmd2md" and then
      # open a generated markdown file, do "Markdown Preview Enhanced: Toggle" and finally save it.
      # This process should render html file with all fancy rendering facilities available.
      ```python name='meta-setup', echo=False, results='asis'
      print('''
      html:
      \tembed_local_images: true
      \ttoc: true
      export_on_save:
      \thtml: true
      ''')
      ```
      ---
      """
    'rightLabelHTML': '<span>pweave</span>'
    'description':
      '''
      Inserts pweave header settings for generating markdown document,
      which is supposed to be rendered as HTML with Markdown-Preview-Enhanced after weaving
      '''
  'header settings for weaving to html':
    'prefix': 'pweave-pmd2html'
    'body':
      '''
      % ${1:Title}
      % ${2:KADOWAKI, Shuhei}
      % ${3:Date}
      $4
      '''
    'rightLabelHTML': '<span>pweave</span>'
    'description': 'Inserts pweave header settings for directly weaving pweave document as HTML file'
  'basic utilties':
    'prefix': 'pweave-utils'
    'body':
      """
      ```python name='utilities-setup', echo=${1:False}
      import os
      import sys
      import numpy as np
      import pandas as pd
      import matplotlib.pyplot as plt
      %matplotlib inline
      \n
      def print_df(df, stralign='center', showindex=True):
      \t''
      \tenders pandas.DataFrame object in markdown files.
      \tSupposed to be used in .pmd file with code chunk `results='asis'`)
      \tn
      \t# Args
      \t df: pd.DataFrame object (Note: Use `df.head` for large data !)
      \t stralign: {'center', 'right', ...}
      \t showindex: {True, False, 'always', 'never', iterator}
      \t''
      \tn
      \trom tabulate import tabulate
      \trint(tabulate(df, df.columns, tablefmt='pipe', stralign=stralign, showindex=showindex))
      ```$2
      """
    'rightLabelHTML': '<span>pweave</span>'
    'description':
      '''
      Inserts Python code block defining pweave utilities
      - imports utility libraries
      - sets matplotlib rendered inline
      - defines function to render pandas.DataFrame beautifully
      '''

  ## code chunks
  'code chunk':
    'prefix': 'pcc'
    'body': "```python\n${1:code}\n```"
    'rightLabelHTML': '<span>pweave</span>'
    'description': 'Inserts pweave code chunk'
    'descriptionMoreURL': "http://mpastell.com/pweave/chunks.html#code-chunk-options"
  'code chunk (asis)':
    'prefix': 'pcca'
    'body': "```python results='asis'\n${1:code}\n```"
    'rightLabelHTML': '<span>pweave</span>'
    'description': 'Inserts pweave code chunk whose outputs won\'t be reformatted'
    'descriptionMoreURL': "http://mpastell.com/pweave/chunks.html#envvar-results='verbatim'"
  'code chunk (hidden)':
    'prefix': 'pcch'
    'body': "```python results='hidden'\n${1:code}\n```"
    'rightLabelHTML': '<span>pweave</span>'
    'description': 'Inserts pweave code chunk whose outputs will be hidden'
    'descriptionMoreURL': "http://mpastell.com/pweave/chunks.html#envvar-results='verbatim'"
  'code chunk (wrapping)':
    'prefix': 'pccw'
    'body': "```python wrap=${1:False}\n${2:code}\n```"
    'description': 'Inserts pweave code chunk with result-wrapping option'
    'rightLabelHTML': '<span>pweave</span>'
    'descriptionMoreURL': "http://mpastell.com/pweave/chunks.html#envvar-wrap=Trueor(False,"
  'code chunk (full default options)':
    'prefix': 'pccfull'
    'body': "```python name=None, echo=True, evaluate=True, results='verbatim', term=False, include=True, caption='', complete=True, wrap=True\n${1:code}\n```"
    'rightLabelHTML': '<span>pweave</span>'
    'description': 'Inserts Python code block with full options set to default values'
    'descriptionMoreURL': "http://mpastell.com/pweave/chunks.html#code-chunk-options"
  'inline code chunk':
    'prefix': 'pci'
    'body': '<% $1 %>'
    'rightLabelHTML': '<span>pweave</span>'
    'description': 'Inserts Python inline code block'
    'descriptionMoreURL': "http://mpastell.com/pweave/usage.html#inline-code"



### JavaScript ###
'.source.js, .source.jsx, .source.flow':
  'Comment block':
    'prefix': 'cb'
    'body':
      '''
      /**
       * ${1:Comment}
       */
      '''
    'description': 'Insert multi-line comment block'
  'Line comment':
    'prefix': 'ci'
    'body': '/* ${1:Comment} */'
    'description': 'Insert line comment block'

  ## ESLint
  'ESLint: Disable block':
    'prefix': 'eslint-disable-block'
    'body':
      '''
      // eslint-disable ${1:disabled-rule}
      ${2:// code body comes here}
      // eslint-disable ${1:disabled-rule}
      '''
    'description': 'Insert eslint-disabled block'
  'ESLint: Disable current line':
    'prefix': 'eslint-disable-current-line'
    'body':
      '''
      // eslint-disable-line ${1:disabled-rule}
      '''
    'description': 'Insert eslint-disable statement for current line'
  'ESLint: Disable next line':
    'prefix': 'eslint-disable-next-line'
    'body':
      '''
      // eslint-disable-next-line ${1:disabled-rule}
      '''
    'description': 'Insert eslint-disable statement for next line'

'.source.js, .source.jsx':
  ## bable
  'babel':
    'prefix': 'babel'
    'body': '/** @babel */\n$1'
    'descrition': 'Insert @babel header'

## flow
'.source.flow':
  'Flow: Use Flow':
    'prefix': 'babel'
    'body': '/** @flow */\n$1'
    'descrition': 'Insert @flow header'



### TypeScript ###
'.source.ts, .source.tsx':
  'Comment block':
    'prefix': 'cb'
    'body':
      '''
      /**
       * ${1:Comment}
       */
      '''
    'description': 'Insert multi-line comment block'
  'Line comment':
    'prefix': 'ci'
    'body': '/* ${1:Comment} */'
    'description': 'Insert line comment block'



### CSS ###
'.source.css':
  'Comment block':
    'prefix': 'cb'
    'body':
      '''
      /**
       * ${1:Comment}
       */
      '''
    'description': 'Insert multi-line comment block'
  'Line comment':
    'prefix': 'ci'
    'body': '/* ${1:Comment} */'
    'description': 'Insert line comment block'



### Java ###
'.source.java':

  ## Imports
  'java.util.*':
    'prefix': 'util'
    'body': 'import java.util.*;'
    'description': 'Imports java.util by random card'

  ## Insertions
  'Main method':
    'prefix': 'main'
    'body':
      '''
      public static void main(String[] args) {
          ${1:// What to do in this class}
      }
      '''
    'description': "Inserts main method"
  'Scanner':
    'prefix': 'sc'
    'body': 'Scanner sc = new Scanner(System.in);'
    'description': 'Inserts Scanner snippet'
  'System.out.print':
    'prefix': 'p'
    'body': 'System.out.print($1);'
    'description': 'Inserts print snippet'
  'System.out.println':
    'prefix': 'pl'
    'body': 'System.out.println($1);'
    'description': 'Inserts println snippet'
  'Comment block':
    'prefix': 'cb'
    'body':
      '''
      /**
       * ${1:Comment}
       */
      '''
  'Line comment':
    'prefix': 'ci'
    'body': '/** ${1:Comment} */'
    'description': 'Insert line comment block'



### Ruby ###
'.source.ruby':
  'do block':
    'prefix': 'do'
    'body': 'do${1: |${2:args}|}\n\t$3\nend'
